services:
  # Infrastructure
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-orchestrator
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Year Filter Worker 1
  year-filter-worker-1:
    build:
      context: .
      dockerfile: ./workers/filter/year-filter/Dockerfile
    container_name: year-filter-worker-1
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Year Filter Worker 2
  year-filter-worker-2:
    build:
      context: .
      dockerfile: ./workers/filter/year-filter/Dockerfile
    container_name: year-filter-worker-2
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Year Filter Worker 3
  year-filter-worker-3:
    build:
      context: .
      dockerfile: ./workers/filter/year-filter/Dockerfile
    container_name: year-filter-worker-3
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Time Filter Worker 1
  time-filter-worker-1:
    build:
      context: .
      dockerfile: ./workers/filter/time-filter/Dockerfile
    container_name: time-filter-worker-1
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Time Filter Worker 2
  time-filter-worker-2:
    build:
      context: .
      dockerfile: ./workers/filter/time-filter/Dockerfile
    container_name: time-filter-worker-2
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Amount Filter Worker 1
  amount-filter-worker-1:
    build:
      context: .
      dockerfile: ./workers/filter/amount-filter/Dockerfile
    container_name: amount-filter-worker-1
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Join Data Handler (single instance for now)
  join-data-handler:
    build:
      context: .
      dockerfile: ./workers/join/data-handler/Dockerfile
    container_name: join-data-handler
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # ItemID Join Worker (single instance for now)
  itemid-join-worker:
    build:
      context: .
      dockerfile: ./workers/join/in-memory/itemid/Dockerfile
    container_name: itemid-join-worker
    depends_on:
      join-data-handler:
        condition: service_started
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # StoreID Join Worker (single instance for now)
  storeid-join-worker:
    build:
      context: .
      dockerfile: ./workers/join/in-memory/storeid/Dockerfile
    container_name: storeid-join-worker
    depends_on:
      join-data-handler:
        condition: service_started
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # In-File Join Worker (Query 4) (single instance for now)
  in-file-join-worker:
    build:
      context: .
      dockerfile: ./workers/join/in-file/Dockerfile
    container_name: in-file-join-worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      join-data-handler:
        condition: service_started
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    volumes:
      - shared-data:/shared-data
    profiles: ["orchestration"]

  # GroupBy Worker (NOT SCALABLE - has internal distributed architecture)
  groupby-worker:
    build:
      context: .
      dockerfile: ./workers/group_by/Dockerfile
    container_name: groupby-worker
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Streaming service (NOT SCALABLE - outputs to stdout)
  streaming-service:
    build:
      context: .
      dockerfile: ./stream/Dockerfile
    container_name: streaming-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Query Gateway 1
  query-gateway-1:
    build:
      context: .
      dockerfile: ./query-gateway/Dockerfile
    container_name: query-gateway
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Query Gateway 2
  query-gateway-2:
    build:
      context: .
      dockerfile: ./query-gateway/Dockerfile
    container_name: query-gateway-2
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Core application (data flow services)
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    container_name: server
    ports:
      - "8081:8080"  # TCP port for client connections
    depends_on:
      rabbitmq:
        condition: service_healthy
      year-filter-worker-1:
        condition: service_started
      year-filter-worker-2:
        condition: service_started
      year-filter-worker-3:
        condition: service_started
      time-filter-worker-1:
        condition: service_started
      time-filter-worker-2:
        condition: service_started
      amount-filter-worker-1:
        condition: service_started
      query-gateway-1:
        condition: service_started
      query-gateway-2:
        condition: service_started
      join-data-handler:
        condition: service_started
      itemid-join-worker:
        condition: service_started
      storeid-join-worker:
        condition: service_started
      in-file-join-worker:
        condition: service_started
      groupby-worker:
        condition: service_started
      streaming-service:
        condition: service_started
    environment:
      - SERVER_PORT=8080
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password
    profiles: ["data-flow"]

  # Client 1
  client-1:
    build:
      context: .
      dockerfile: ./client/Dockerfile
    container_name: client
    depends_on:
      server:
        condition: service_started
    volumes:
      - ./data:/app/data
    environment:
      - CLIENT_ID=CLI1
    command: ["./main", "/app/data", "server:8080"]
    profiles: ["data-flow"]

  # Testing (optional, can be run with profile)
  test-runner:
    build:
      context: .
      dockerfile: ./tests/Dockerfile
    container_name: test-runner
    profiles: ["test"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_started
    environment:
      RABBITMQ_URL: "amqp://admin:password@rabbitmq:5672/"
      LOG_LEVEL: "info"
      GOMAXPROCS: "1"
    command: ["go", "test", "-v", "./..."]
    stdin_open: true
    tty: true

volumes:
  shared-data:
    driver: local
