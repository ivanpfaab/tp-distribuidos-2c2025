services:
  # Infrastructure
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-orchestrator
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Core application (data flow services)
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    container_name: echo-server
    ports:
      - "8081:8080"   # TCP port for client connections
    depends_on:
      rabbitmq:
        condition: service_healthy
      query-orchestrator:
        condition: service_healthy
      year-filter-worker:
        condition: service_started
      time-filter-worker:
        condition: service_started
      amount-filter-worker:
        condition: service_started
      join-worker:
        condition: service_started
      groupby-worker:
        condition: service_started
      streaming-service:
        condition: service_started
      data-writer:
        condition: service_started
    environment:
      - SERVER_PORT=8080
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password
    profiles: ["data-flow"]

  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile
    container_name: echo-client
    depends_on:
      server:
        condition: service_started
    volumes:
      - ./data:/app/data
    command: ["./main", "/app/data", "echo-server:8080"]
    profiles: ["data-flow"]

  # Query orchestration
  query-orchestrator:
    build:
      context: .
      dockerfile: ./server/controller/query-orchestrator/Dockerfile
    container_name: query-orchestrator
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    healthcheck:
      test: ["CMD", "pgrep", "main"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles: ["orchestration"]

  # Worker services
  year-filter-worker:
    build:
      context: .
      dockerfile: ./workers/filter/year-filter/Dockerfile
    container_name: year-filter-worker
    depends_on:
      query-orchestrator:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  time-filter-worker:
    build:
      context: .
      dockerfile: ./workers/filter/time-filter/Dockerfile
    container_name: time-filter-worker
    depends_on:
      query-orchestrator:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  amount-filter-worker:
    build:
      context: .
      dockerfile: ./workers/filter/amount-filter/Dockerfile
    container_name: amount-filter-worker
    depends_on:
      query-orchestrator:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  join-worker:
    build:
      context: .
      dockerfile: ./workers/join/Dockerfile
    container_name: join-worker
    depends_on:
      query-orchestrator:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  groupby-worker:
    build:
      context: .
      dockerfile: ./workers/group_by/Dockerfile
    container_name: groupby-worker
    depends_on:
      query-orchestrator:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Streaming service
  streaming-service:
    build:
      context: .
      dockerfile: ./stream/Dockerfile
    container_name: streaming-service
    depends_on:
      query-orchestrator:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Data writer service
  data-writer:
    build:
      context: .
      dockerfile: ./writter/Dockerfile
    container_name: data-writer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["data-flow", "orchestration"]

  # Query gateway service
  query-gateway:
    build:
      context: .
      dockerfile: ./query-gateway/Dockerfile
    container_name: query-gateway
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: password
    profiles: ["orchestration"]

  # Testing (optional, can be run with profile)
  test-runner:
    build:
      context: .
      dockerfile: ./tests/Dockerfile
    container_name: test-runner
    profiles: ["test"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_started
    environment:
      RABBITMQ_URL: "amqp://admin:password@rabbitmq:5672/"
      LOG_LEVEL: "info"
      GOMAXPROCS: "1"
    command: ["go", "test", "-v", "./..."]
    stdin_open: true
    tty: true
